"""
Django settings for computersecurity project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import json
from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-sv=-jabucy7_8%21_&j*@q=#$3v+w5ua*he1tvf*91vt*7!jts'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'accounts',

    'django_filters',
    'django_password_history',

    'sslserver',
]

with open("accounts/config/pass.json") as file:
    val_helper = json.load(file)

DEFAULT_PREVIOUS_PASSWORD_COUNT = 3
PREVIOUS_PASSWORD_COUNT = val_helper.get('previous_password_history_count', DEFAULT_PREVIOUS_PASSWORD_COUNT)
AUTH_USER_MODEL = "auth.User"

LOGIN_MAX_RETRIES = val_helper.get('max_retries')
LOGIN_LOCK_DOWN_TIME = val_helper.get('lock_down_time')
LOGIN_FAILURE_COUNTING_DURATION = val_helper.get('failure_counting_duration')

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'computersecurity.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'computersecurity.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': "django_db",
#         'HOST': "127.0.0.1",
#         'PORT': "3306",
#         'USER': "root",
#         'PASSWORD': "1234",
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'communication',
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'USER': 'root',
        'PASSWORD': '1234',
    }
}

# Added by C4rm3r
PASSWORD_HASHERS = [
    # This one is the same as PBKDF2SHA1PasswordHasher but the number of iterations is 1
    'accounts.hashers.OneIterationOnlyPBKDF2SHA1PasswordHasher',

    # Actually this is an HMAC Hasher !!!!! don't do anything else, django doing all the process automatically for us !
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'accounts.hashers.HMACPasswordHasher',
]


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'accounts.password_validator.CustomPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

MEDIA_URL = '/images/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False
SECURE_SSL_REDIRECT = False

PASSWORD_HASHERS = [
    # This one is the same as PBKDF2SHA1PasswordHasher but the number of iterations is 1
    'accounts.hashers.OneIterationOnlyPBKDF2SHA1PasswordHasher',

    # Actually this is an HMAC Hasher !!!!! don't do anything else, django doing all the process automatically for us !
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'accounts.hashers.HMACPasswordHasher',
]

#SMTP Configuration

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'communicationgaba1@gmail.com'
EMAIL_HOST_PASSWORD = '12345!@#$%'